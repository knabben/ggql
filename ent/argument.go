// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/knabben/ggql/ent/argument"
)

// Argument is the model entity for the Argument schema.
type Argument struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// TypeKind holds the value of the "type_kind" field.
	TypeKind string `json:"type_kind,omitempty"`
	// TypeName holds the value of the "type_name" field.
	TypeName             string `json:"type_name,omitempty"`
	field_type_arguments *int
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Argument) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // description
		&sql.NullString{}, // type_kind
		&sql.NullString{}, // type_name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Argument) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // field_type_arguments
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Argument fields.
func (a *Argument) assignValues(values ...interface{}) error {
	if m, n := len(values), len(argument.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		a.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		a.Description = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type_kind", values[2])
	} else if value.Valid {
		a.TypeKind = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type_name", values[3])
	} else if value.Valid {
		a.TypeName = value.String
	}
	values = values[4:]
	if len(values) == len(argument.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field field_type_arguments", value)
		} else if value.Valid {
			a.field_type_arguments = new(int)
			*a.field_type_arguments = int(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this Argument.
// Note that, you need to call Argument.Unwrap() before calling this method, if this Argument
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Argument) Update() *ArgumentUpdateOne {
	return (&ArgumentClient{a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Argument) Unwrap() *Argument {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Argument is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Argument) String() string {
	var builder strings.Builder
	builder.WriteString("Argument(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", name=")
	builder.WriteString(a.Name)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteString(", type_kind=")
	builder.WriteString(a.TypeKind)
	builder.WriteString(", type_name=")
	builder.WriteString(a.TypeName)
	builder.WriteByte(')')
	return builder.String()
}

// Arguments is a parsable slice of Argument.
type Arguments []*Argument

func (a Arguments) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
