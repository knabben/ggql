// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/knabben/ggql/ent/argument"
)

// ArgumentCreate is the builder for creating a Argument entity.
type ArgumentCreate struct {
	config
	name *string
	kind *string
}

// SetName sets the name field.
func (ac *ArgumentCreate) SetName(s string) *ArgumentCreate {
	ac.name = &s
	return ac
}

// SetKind sets the kind field.
func (ac *ArgumentCreate) SetKind(s string) *ArgumentCreate {
	ac.kind = &s
	return ac
}

// Save creates the Argument in the database.
func (ac *ArgumentCreate) Save(ctx context.Context) (*Argument, error) {
	if ac.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if ac.kind == nil {
		return nil, errors.New("ent: missing required field \"kind\"")
	}
	return ac.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ArgumentCreate) SaveX(ctx context.Context) *Argument {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ArgumentCreate) sqlSave(ctx context.Context) (*Argument, error) {
	var (
		a     = &Argument{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: argument.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: argument.FieldID,
			},
		}
	)
	if value := ac.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: argument.FieldName,
		})
		a.Name = *value
	}
	if value := ac.kind; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: argument.FieldKind,
		})
		a.Kind = *value
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}
