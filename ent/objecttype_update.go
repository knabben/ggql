// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/knabben/ggql/ent/objecttype"
	"github.com/knabben/ggql/ent/predicate"
)

// ObjectTypeUpdate is the builder for updating ObjectType entities.
type ObjectTypeUpdate struct {
	config
	name       *string
	predicates []predicate.ObjectType
}

// Where adds a new predicate for the builder.
func (otu *ObjectTypeUpdate) Where(ps ...predicate.ObjectType) *ObjectTypeUpdate {
	otu.predicates = append(otu.predicates, ps...)
	return otu
}

// SetName sets the name field.
func (otu *ObjectTypeUpdate) SetName(s string) *ObjectTypeUpdate {
	otu.name = &s
	return otu
}

// SetNillableName sets the name field if the given value is not nil.
func (otu *ObjectTypeUpdate) SetNillableName(s *string) *ObjectTypeUpdate {
	if s != nil {
		otu.SetName(*s)
	}
	return otu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (otu *ObjectTypeUpdate) Save(ctx context.Context) (int, error) {
	return otu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (otu *ObjectTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := otu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (otu *ObjectTypeUpdate) Exec(ctx context.Context) error {
	_, err := otu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otu *ObjectTypeUpdate) ExecX(ctx context.Context) {
	if err := otu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (otu *ObjectTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   objecttype.Table,
			Columns: objecttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: objecttype.FieldID,
			},
		},
	}
	if ps := otu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := otu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: objecttype.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, otu.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ObjectTypeUpdateOne is the builder for updating a single ObjectType entity.
type ObjectTypeUpdateOne struct {
	config
	id   int
	name *string
}

// SetName sets the name field.
func (otuo *ObjectTypeUpdateOne) SetName(s string) *ObjectTypeUpdateOne {
	otuo.name = &s
	return otuo
}

// SetNillableName sets the name field if the given value is not nil.
func (otuo *ObjectTypeUpdateOne) SetNillableName(s *string) *ObjectTypeUpdateOne {
	if s != nil {
		otuo.SetName(*s)
	}
	return otuo
}

// Save executes the query and returns the updated entity.
func (otuo *ObjectTypeUpdateOne) Save(ctx context.Context) (*ObjectType, error) {
	return otuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (otuo *ObjectTypeUpdateOne) SaveX(ctx context.Context) *ObjectType {
	ot, err := otuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ot
}

// Exec executes the query on the entity.
func (otuo *ObjectTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := otuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (otuo *ObjectTypeUpdateOne) ExecX(ctx context.Context) {
	if err := otuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (otuo *ObjectTypeUpdateOne) sqlSave(ctx context.Context) (ot *ObjectType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   objecttype.Table,
			Columns: objecttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  otuo.id,
				Type:   field.TypeInt,
				Column: objecttype.FieldID,
			},
		},
	}
	if value := otuo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: objecttype.FieldName,
		})
	}
	ot = &ObjectType{config: otuo.config}
	_spec.Assign = ot.assignValues
	_spec.ScanValues = ot.scanValues()
	if err = sqlgraph.UpdateNode(ctx, otuo.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ot, nil
}
