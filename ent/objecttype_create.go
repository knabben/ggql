// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/knabben/ggql/ent/fieldtype"
	"github.com/knabben/ggql/ent/objecttype"
)

// ObjectTypeCreate is the builder for creating a ObjectType entity.
type ObjectTypeCreate struct {
	config
	name   *string
	fields map[int]struct{}
}

// SetName sets the name field.
func (otc *ObjectTypeCreate) SetName(s string) *ObjectTypeCreate {
	otc.name = &s
	return otc
}

// SetNillableName sets the name field if the given value is not nil.
func (otc *ObjectTypeCreate) SetNillableName(s *string) *ObjectTypeCreate {
	if s != nil {
		otc.SetName(*s)
	}
	return otc
}

// AddFieldIDs adds the fields edge to FieldType by ids.
func (otc *ObjectTypeCreate) AddFieldIDs(ids ...int) *ObjectTypeCreate {
	if otc.fields == nil {
		otc.fields = make(map[int]struct{})
	}
	for i := range ids {
		otc.fields[ids[i]] = struct{}{}
	}
	return otc
}

// AddFields adds the fields edges to FieldType.
func (otc *ObjectTypeCreate) AddFields(f ...*FieldType) *ObjectTypeCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return otc.AddFieldIDs(ids...)
}

// Save creates the ObjectType in the database.
func (otc *ObjectTypeCreate) Save(ctx context.Context) (*ObjectType, error) {
	if otc.name == nil {
		v := objecttype.DefaultName
		otc.name = &v
	}
	return otc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (otc *ObjectTypeCreate) SaveX(ctx context.Context) *ObjectType {
	v, err := otc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (otc *ObjectTypeCreate) sqlSave(ctx context.Context) (*ObjectType, error) {
	var (
		ot    = &ObjectType{config: otc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: objecttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: objecttype.FieldID,
			},
		}
	)
	if value := otc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: objecttype.FieldName,
		})
		ot.Name = *value
	}
	if nodes := otc.fields; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   objecttype.FieldsTable,
			Columns: []string{objecttype.FieldsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fieldtype.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, otc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ot.ID = int(id)
	return ot, nil
}
